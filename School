import java.util.*;



public class School {
	private TreeMap<Student, String> gradeMap; //this is now a treeMap, but it has the same parameters
	//private int mapSize; //this is now irrelevant
	
	public School(){
		//mapSize = 100; no longer sizeable
		gradeMap = new TreeMap<Student, String>(); //must change 
	}
	
	public void add(Student toBeAdded, String grade){
		gradeMap.put(toBeAdded,  grade); 
	}
	
	public Object remove(Student toBeRemoved){
		return gradeMap.remove(toBeRemoved);
	}
	
	public boolean modify(Student changeling, String newGrade){
		if (gradeMap.containsKey(changeling)){ //if a student exists
			gradeMap.put(changeling, newGrade); //then we replace the student with the new grade
			return true; //if this case is true return true
		}
		return false; //else return false bc the student does not exist
	}
	
	public void display(){
		if(gradeMap.isEmpty()){
			System.out.println("There are no students enrolled");
			return;
		}
		System.out.println("Students Enrolled");
		System.out.println("-----------------------");
		Student cur = gradeMap.firstKey(); //this had to be changed to first key
		
		while(cur!=gradeMap.lastKey()){ //this had to be changed to now advance individually with a higher key call
			System.out.print(cur); //because thats the only way to make it alphabetical
			System.out.println(gradeMap.get(cur));
			cur = gradeMap.higherKey(cur);
		}
		
		System.out.print(gradeMap.lastKey()); //you also have to include a separate last iteration
		System.out.println(gradeMap.get(gradeMap.lastKey())); //because in order to stop the loop properly
		//you have to stop it one iteration early
		
	}

	public boolean find(Student stu) {
		return gradeMap.containsKey(stu); //students are keys
		//therefore, returning this test is accurate
	}

}
