/**
@author Chloe Elliott
@version Filename: School.java
@version Date: 4/9/15
@version Program: HashMap Program
@version Description: Store TreeMap with students and corresponding grades, simulates a gradebook
*/

import java.util.*;


public class School {
	private TreeMap<Student, String> gradeMap; //this is now a treeMap, but it has the same parameters
	//private int mapSize; //this is now irrelevant
	
	public School(){
		//mapSize = 100; no longer sizeable
		gradeMap = new TreeMap<Student, String>(); //must change 
	}
	
	/**
	Adds a student and grade to the hashmap
	@param toBeAdded the student to be added as a key
	@param grade the grade of the student to be added as a value
	@return none
	@pre toBeAdded is actually a student
	@post a new entry has been added to the hashmap
	*/
	public void add(Student toBeAdded, String grade){
		gradeMap.put(toBeAdded,  grade); 
	}
	
	/**
	Remove a student and grade from the hashmap
	@param toBeRemoved the student to be removed
	@return Object the entry removed
	@pre toBeAdded is actually a student
	@post if the student existed, it is now removed from the gradebook
	*/
	public Object remove(Student toBeRemoved){
		return gradeMap.remove(toBeRemoved);
	}
	
	
	/**
	Changes an existing student's grade
	@param changeling the student to be changed
	@param newGrade the new grade of the student
	@return boolean showing whether the student was present or not
	@pre none
	@post a student's grade may have been changed
	*/
	public boolean modify(Student changeling, String newGrade){
		if (gradeMap.containsKey(changeling)){ //if a student exists
			gradeMap.put(changeling, newGrade); //then we replace the student with the new grade
			return true; //if this case is true return true
		}
		return false; //else return false bc the student does not exist
	}
	
	/**
	Displays the students and grades
	@param none
	@return none
	@pre none
	@post none
	*/
	public void display(){
		if(gradeMap.isEmpty()){
			System.out.println("There are no students enrolled");
			return;
		}
		System.out.println("Students Enrolled");
		System.out.println("-----------------------");
		Student cur = gradeMap.firstKey(); //this had to be changed to first key
		
		while(cur!=gradeMap.lastKey()){ //this had to be changed to now advance individually with a higher key call
			System.out.print(cur); //because thats the only way to make it alphabetical
			System.out.println(gradeMap.get(cur));
			cur = gradeMap.higherKey(cur);
		}
		
		System.out.print(gradeMap.lastKey()); //you also have to include a separate last iteration
		System.out.println(gradeMap.get(gradeMap.lastKey())); //because in order to stop the loop properly
		//you have to stop it one iteration early
		
	}

	/**
	Locates a student in the map
	@param stu the student to be found
	@return boolean showing whether the student was found
	@pre none
	@post none
	*/
	public boolean find(Student stu) {
		return gradeMap.containsKey(stu); //students are keys
		//therefore, returning this test is accurate
	}

}
